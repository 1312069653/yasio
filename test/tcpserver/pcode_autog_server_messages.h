/* This file is generated by pcode_autog-1.15.9
** Copyright(c) Link.Doex, ALL RIGHTS RESERVED.
**
** Purpose: contains all protocol message definiations and codec function
**          implementations
**
*/
#ifndef _PCODE_AUTOG_SERVER_MESSAGES_H_
#define _PCODE_AUTOG_SERVER_MESSAGES_H_

#include "pcode_autog_server_constants.h"
#include "pcode_autog_server_includes.h"
#include "pcode_autog_server_structures.h"

//#include "iluastream.h"
//
//#include "oluastream.h"

using namespace structures;
namespace messages {

struct MsgBase {
    virtual ~MsgBase(){}
    virtual obinarystream encode(void) const { return obinarystream(); };
    virtual int decode(const char* data, int len) { return 25001; };
    //virtual int decodeLua(lua_State* L) { return 25002; };
    //virtual int encodeLua(lua_State* L) const { return 25002; };
    virtual int get_id(void) const { return -1; };
    virtual const char* get_className() const { return "MsgBase"; };
};

struct MsgHeader {
    uint16_t                length;
    uint16_t                command_id;
    uint16_t                version;
    uint16_t                reserved;
    uint64_t                reserved2;

    obinarystream encode(void) const;

    // decode return the remain bytes of buffer.
    int decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct LocalErrorResp : public MsgBase {
    int16_t                 error_code;
    std::string             error_msg;

    obinarystream encode(void)  const override;

    // decode return the remain bytes of buffer.
    int decode(const char* data, int len) override;

    // decode LUA.
   // virtual int decodeLua(lua_State* L) override;

    //virtual int encodeLua(lua_State* L) const override;

    int get_id() const override { return CID_LOCAL_ERROR_INFO; };

    const char* get_className() const override { return "LocalErrorResp"; };

    std::string get_formated_string(void) const;
};

struct LoginReq : public MsgBase {
    std::string             device_id;
    std::string             user_name;
    std::string             append_msg;

    obinarystream encode(void)  const override;

    // decode return the remain bytes of buffer.
    int decode(const char* data, int len) override;

    // decode LUA.
    //virtual int decodeLua(lua_State* L) override;

    //virtual int encodeLua(lua_State* L) const override;

    int get_id() const override { return CID_LOGIN_REQ; };

    const char* get_className() const override { return "LoginReq"; };

    std::string get_formated_string(void) const;
};

struct LoginResp : public MsgBase {
    uint32_t                result;
    uint32_t                user_id;

    obinarystream encode(void)  const override;

    // decode return the remain bytes of buffer.
    int decode(const char* data, int len) override;

    // decode LUA.
    //virtual int decodeLua(lua_State* L) override;

    //virtual int encodeLua(lua_State* L) const override;

    int get_id() const override { return CID_LOGIN_RESP; };

    const char* get_className() const override { return "LoginResp"; };

    std::string get_formated_string(void) const;
};

struct SoldierMovedNotify : public MsgBase {
    uint8_t                 startp;
    uint8_t                 endp;

    obinarystream encode(void)  const override;

    // decode return the remain bytes of buffer.
    int decode(const char* data, int len) override;

    // decode LUA.
    //virtual int decodeLua(lua_State* L) override;

    //virtual int encodeLua(lua_State* L) const override;

    int get_id() const override { return CID_SOLDIER_MOVED_NOTIFY; };

    const char* get_className() const override { return "SoldierMovedNotify"; };

    std::string get_formated_string(void) const;
};

struct SoldierRemovedNotify : public MsgBase {
    uint8_t                 matrixp;

    obinarystream encode(void)  const override;

    // decode return the remain bytes of buffer.
    int decode(const char* data, int len) override;

    // decode LUA.
    //virtual int decodeLua(lua_State* L) override;

    //virtual int encodeLua(lua_State* L) const override;

    int get_id() const override { return CID_SOLDIER_REMOVED_NOTIFY; };

    const char* get_className() const override { return "SoldierRemovedNotify"; };

    std::string get_formated_string(void) const;
};

struct TurnOverNotify : public MsgBase {
    uint8_t                 reserved;

    obinarystream encode(void)  const override;

    // decode return the remain bytes of buffer.
    int decode(const char* data, int len) override;

    // decode LUA.
    //virtual int decodeLua(lua_State* L) override;

    //virtual int encodeLua(lua_State* L) const override;

    int get_id() const override { return CID_TURN_OVER_NOTIFY; };

    const char* get_className() const override { return "TurnOverNotify"; };

    std::string get_formated_string(void) const;
};

struct VersusDataChangedNotify : public MsgBase {
    uint8_t                 vdi;
    uint32_t                value;

    obinarystream encode(void)  const override;

    // decode return the remain bytes of buffer.
    int decode(const char* data, int len) override;

    // decode LUA.
    //virtual int decodeLua(lua_State* L) override;

    //virtual int encodeLua(lua_State* L) const override;

    int get_id() const override { return CID_VERSUSDATA_CHANGED_NOTIFY; };

    const char* get_className() const override { return "VersusDataChangedNotify"; };

    std::string get_formated_string(void) const;
};

struct BattleHeartbeatReq : public MsgBase {
    uint8_t                 reserved;

    obinarystream encode(void)  const override;

    // decode return the remain bytes of buffer.
    int decode(const char* data, int len) override;

    // decode LUA.
    //virtual int decodeLua(lua_State* L) override;

    //virtual int encodeLua(lua_State* L) const override;

    int get_id() const override { return CID_BATTLE_HEARTBEAT_REQ; };

    const char* get_className() const override { return "BattleHeartbeatReq"; };

    std::string get_formated_string(void) const;
};

struct PeerOfflineNotify : public MsgBase {
    uint8_t                 reserved;

    obinarystream encode(void)  const override;

    // decode return the remain bytes of buffer.
    int decode(const char* data, int len) override;

    // decode LUA.
    //virtual int decodeLua(lua_State* L) override;

    //virtual int encodeLua(lua_State* L) const override;

    int get_id() const override { return CID_PEER_OFFLINE_NOTIFY; };

    const char* get_className() const override { return "PeerOfflineNotify"; };

    std::string get_formated_string(void) const;
};

struct PeerOnlineNotify : public MsgBase {
    uint8_t                 reserved;

    obinarystream encode(void)  const override;

    // decode return the remain bytes of buffer.
    int decode(const char* data, int len) override;

    // decode LUA.
    //virtual int decodeLua(lua_State* L) override;

    //virtual int encodeLua(lua_State* L) const override;

    int get_id() const override { return CID_PEER_ONLINE_NOTIFY; };

    const char* get_className() const override { return "PeerOnlineNotify"; };

    std::string get_formated_string(void) const;
};

struct RealtimeBattleInfoNotify : public MsgBase {
    bool                    receiver_first;
    int8_t                  opside;
    uint8_t                 mode;
    int16_t                 rounds;
    int16_t                 rounds_limit;
    uint16_t                steps;
    uint16_t                optime;
    RealtimeFieldInfo       sender_info;
    RealtimeFieldInfo       receiver_info;

    obinarystream encode(void)  const override;

    // decode return the remain bytes of buffer.
    int decode(const char* data, int len) override;

    // decode LUA.
    //virtual int decodeLua(lua_State* L) override;

    //virtual int encodeLua(lua_State* L) const override;

    int get_id() const override { return CID_REALTIME_BATTLE_INFO_NOTIFY; };

    const char* get_className() const override { return "RealtimeBattleInfoNotify"; };

    std::string get_formated_string(void) const;
};

// Remark: this function just create a temp message, and it not thread-safety, don't save the pointer any time!;
//     and do not use when message large than 16384Byte, 16K.
MsgBase* temp_create_message(int command_id);
}; /*namespace messages*/


#endif

