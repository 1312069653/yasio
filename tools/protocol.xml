<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!-- APPLICATION LYAER PROTOCOL AUTO GENERATOR DESCRIPTION FILE
Field Supported Attributes:
command_id,
length_specifier
present_condition
zlib: 1: compress message body use zlib, 0: no zlib used.
mode: 
    encode: generate encode code only,
    encodelua: generate encode c++ message to lua
    decodelua: generate decode lua table to c++ message.
    decode: generate decode only,
    all: generate all
    lua.encode: pure lua binary protocol
    lua.decode: pure lua binary protocol
    
c++ protocol header code header:

End User should implement: "obinarystream pcode_autog_begin_encode(uint16_t command_id);"
such as:
obinarystream pcode_autog_begin_encode(uint16_t command_id)
{
    messages::MsgHeader header;
    header.length = 0;
    header.command_id = command_id;
    header.version = 1;
    header.reserved = 0x5a5a;
    header.reserved2 = microtime();

    return header.encode();
}


-->
<protocol name="client" version="1.16" author="halx99" release_date="2016.6.9">

  <header desc="16 bytes header, unused for generator, on for description protocol">
    <field name="length" type="uint16_t" />
    <field name="command_id" type="uint16_t" />
    <field name="version"  type="uint16_t" />
    <field name="reserved" type="uint16_t" /> <!-- magic number For packet check, such as 0x5a5a-->
    <field name="reserved2" type="uint64_t" /> <!-- May be timestamp -->
  </header>

  <structures>
    
    <structure name="UserInfo">
      <field name="user_id" type="uint32_t" />
      <field name="user_name" type="std::string" />
      <field name="equip_id" type="uint32_t" />
      <field name="hero_id" type="uint32_t" />
      <field name="hero_lv" type="uint16_t" />
      <field name="hero_hp" type="uint32_t" />
      <field name="hero_mp" type="uint32_t" />
    </structure>
    
  </structures>

  <messages>
    
    <message name="MsgHeader" is_header="1" >
      <field name="length" type="uint16_t" />
      <field name="command_id" type="uint16_t" />
      <field name="version"  type="uint16_t" />
      <field name="reserved" type="uint16_t" /> <!-- magic number For packet check, such as 0x5a5a-->
      <field name="reserved2" type="uint64_t" /> <!-- May be timestamp -->
    </message>

     <message name="LoginReq" command_id="CID_LOGIN_REQ = 101" mode="lua.encode|lua.decode">	<!-- 登陆请求 -->
      <field name="username" type="std::string" />
      <field name="password" type="std::string" />
    </message>

    <message name="LoginResp" command_id="CID_LOGIN_RESP = 102" mode="lua.encode|lua.decode">	<!-- 登陆响应 -->
      <field name="succeed" type="bool" />
      <field name="session" type="int32_t" />
      <field name="append_info" type="std::string" /> <!--如果自定义json格式则可增加附加字符串, 自行解析和编码-->
    </message>

    <message name="LocalErrorResp" command_id="CID_LOCAL_ERROR_INFO = 0x7fff" mode="lua.encode|lua.decode">	<!-- 网络出错 -->
      <field name="error_code" type="int16_t" />
      <field name="error_msg" type="std::string" />
    </message>


    
    <message name="MsgPeerEndpointReq" command_id="CID_MSG_PEER_ENDPOINT_REQ = 1001" mode="lua.encode|lua.decode">
      <field name="user_id" type="uint32_t" />
    </message>
    
    <message name="MsgPeerEndpointResp" command_id="CID_MSG_PEER_ENDPOINT_RESP= 1002" mode="lua.decode">
      <field name="user_id" type="uint32_t" />
      <field name="addr" type="std::string" />
      <field name="port" type="uint16_t" />
    </message>
   
    <message name="MsgGetFriendListReq" command_id="CID_MSG_GET_FRIENDLIST_REQ = 1003" mode="lua.encode">
      <field name="user_id" type="uint32_t" />
    </message>
   
    <message name="MsgGetFriendListResp" command_id="CID_MSG_GET_FRIENDLIST_RESP = 1004" mode="lua.decode">
      <field name="result" type="int8_t" />
      <field name="user_id" type="uint32_t" />
      <field name="friends" type="std::vector&lt;UserInfo&gt;" />
    </message>
    
  </messages>
  
</protocol>


